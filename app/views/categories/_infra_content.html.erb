<div style="margin-bottom: 20px; overflow-y: auto; max-height: 300px;">
  <% infrastructures.each do |item| %>
    <div class="item-container">
      <%= form_with(model: item, html: { class: "form-inline" }) do |i| %>
        <div class="form-container">
          <div class="form-group">
            <%= item.item_name %>
          </div>
          <div class="form-group">
            <%= i.number_field :study_time, autocomplete: "off", class: "form-control" %>
          </div>
          <%= i.hidden_field :item_name, value: item.item_name %>
          <%= i.submit "学習時間を保存する", class: "open-modal btn btn-primary", onclick: "handleSave('#{item.item_name}')" %>
        </div>
      <% end %>

      <%= form_with(model: item, method: :delete) do |i| %>
        <%= i.submit "削除する", class: "destroy-modal btn", data: { item_name: item.item_name, item_id: item.id }, onclick: "confirmDelete('#{item.item_name}', #{item.id})" %>
      <% end %>
    </div>
  <% end %>
</div>

<div id="myModal" class="modal">
  <div class="modal-content">
    <p id="modalContent"></p>
    <a href="#" class="modal-close-btn" onclick="closeModal()">編集ページに戻る</a>
  </div>
</div>

<script>
function deleteItem(itemId) {
  fetch(`/items/${itemId}`, { method: 'DELETE' })
    .then(response => {
      if (response.ok) {
        return response.json(); // JSON形式のレスポンスを取得
      } else {
        console.error('アイテムの削除に失敗しました。ステータス:', response.status);
        // エラーメッセージが JSON 形式でない場合の処理
        response.text().then(errorText => {
          console.error('エラーテキスト:', errorText);
        });
      }
    })
    .then(data => {
      if (data && data.status === 'success') {
        handleItemDeletion(data.item_id);
      }
    })
    .catch(error => console.error('アイテムの削除中にエラーが発生しました:', error));
}

// モーダル表示関数
function showModal(itemName) {
  var modal = document.getElementById('myModal');
  var modalContent = document.getElementById('modalContent');

  // モーダルコンテンツの更新
  modalContent.innerHTML = itemName + 'の学習時間を保存しました！<br><br>';
  
  // モーダルを表示
  modal.style.display = 'flex'; // display: flex に変更
}

// 保存ボタンがクリックされたときにモーダルを表示
function handleSave(itemName) {
  showModal(itemName);
  // ここに保存の実際の処理を追加する
}

// モーダルを閉じる関数
function closeModal() {
  var modal = document.getElementById('myModal');
  modal.style.display = 'none';
  
  // ページをリロード
  location.reload();
}

// アイテム削除後の処理
function handleItemDeletion(itemName) {
  var modalContent = document.getElementById('modalContent');
  modalContent.innerHTML = itemName + 'を削除しました！<br><br>';

  var closeBtn = document.createElement('button');
  closeBtn.innerText = '閉じる';
  closeBtn.onclick = function() {
    closeModal();
  };
  modalContent.appendChild(closeBtn);

  showModal();
}


// アイテム削除を確認し、削除処理を実行
function confirmDelete(itemName, itemId) {
  var modalContent = document.getElementById('modalContent');
  modalContent.innerHTML = itemName + 'を削除します。よろしいですか？<br><br>';

  var confirmBtn = document.createElement('button');
  confirmBtn.innerText = 'はい';
  confirmBtn.onclick = function() {
    closeModal();
    deleteItem(itemId);
  };
  modalContent.appendChild(confirmBtn);

  var cancelBtn = document.createElement('button');
  cancelBtn.innerText = 'いいえ';
  cancelBtn.onclick = function() {
    closeModal();
  };
  modalContent.appendChild(cancelBtn);

  showModal();
}

</script>
